<#@ template hostspecific="false" language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

<#
var intTypes = new (string name, int bitCount)[] {
    ("byte",   8),
    ("sbyte",  8),
    ("short",  16),
    ("ushort", 16),
    ("int",    32),
    ("uint",   32),
    ("long",   64),
    ("ulong",  64),
};
#>
namespace YARG.Core.Extensions
{
    public static class NumberExtensions
    {
<#
foreach (var (type, bitCount) in intTypes)
{
#>
        #region <#= type #>
        public static int CountBits(this <#= type #> value)
            => value.CountBits(<#= bitCount #>);

        public static int CountBits(this <#= type #> value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (<#= type #>)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this <#= type #> value)
        {
            for (int i = <#= bitCount #> - 1; i >= 0; i--)
            {
                if ((value & (<#= type #>)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this <#= type #> value)
        {
            for (int i = 0; i < <#= bitCount #>; i++)
            {
                if ((value & (<#= type #>)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

<#
}
#>
    }
}