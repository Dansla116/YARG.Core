//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace YARG.Core.Extensions
{
    public static class NumberExtensions
    {
        #region byte
        public static int CountBits(this byte value)
            => value.CountBits(8);

        public static int CountBits(this byte value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (byte)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this byte value)
        {
            for (int i = 8 - 1; i >= 0; i--)
            {
                if ((value & (byte)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this byte value)
        {
            for (int i = 0; i < 8; i++)
            {
                if ((value & (byte)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

        #region sbyte
        public static int CountBits(this sbyte value)
            => value.CountBits(8);

        public static int CountBits(this sbyte value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (sbyte)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this sbyte value)
        {
            for (int i = 8 - 1; i >= 0; i--)
            {
                if ((value & (sbyte)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this sbyte value)
        {
            for (int i = 0; i < 8; i++)
            {
                if ((value & (sbyte)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

        #region short
        public static int CountBits(this short value)
            => value.CountBits(16);

        public static int CountBits(this short value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (short)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this short value)
        {
            for (int i = 16 - 1; i >= 0; i--)
            {
                if ((value & (short)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this short value)
        {
            for (int i = 0; i < 16; i++)
            {
                if ((value & (short)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

        #region ushort
        public static int CountBits(this ushort value)
            => value.CountBits(16);

        public static int CountBits(this ushort value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (ushort)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this ushort value)
        {
            for (int i = 16 - 1; i >= 0; i--)
            {
                if ((value & (ushort)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this ushort value)
        {
            for (int i = 0; i < 16; i++)
            {
                if ((value & (ushort)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

        #region int
        public static int CountBits(this int value)
            => value.CountBits(32);

        public static int CountBits(this int value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (int)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this int value)
        {
            for (int i = 32 - 1; i >= 0; i--)
            {
                if ((value & (int)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this int value)
        {
            for (int i = 0; i < 32; i++)
            {
                if ((value & (int)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

        #region uint
        public static int CountBits(this uint value)
            => value.CountBits(32);

        public static int CountBits(this uint value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (uint)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this uint value)
        {
            for (int i = 32 - 1; i >= 0; i--)
            {
                if ((value & (uint)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this uint value)
        {
            for (int i = 0; i < 32; i++)
            {
                if ((value & (uint)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

        #region long
        public static int CountBits(this long value)
            => value.CountBits(64);

        public static int CountBits(this long value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (long)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this long value)
        {
            for (int i = 64 - 1; i >= 0; i--)
            {
                if ((value & (long)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this long value)
        {
            for (int i = 0; i < 64; i++)
            {
                if ((value & (long)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

        #region ulong
        public static int CountBits(this ulong value)
            => value.CountBits(64);

        public static int CountBits(this ulong value, int bitCount)
        {
            int count = 0;
            for (int i = 0; i < bitCount; i++)
            {
                if ((value & (ulong)(1 << i)) != 0)
                    count++;
            }
            return count;
        }

        public static int MostSignificantBit(this ulong value)
        {
            for (int i = 64 - 1; i >= 0; i--)
            {
                if ((value & (ulong)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }

        public static int LeastSignificantBit(this ulong value)
        {
            for (int i = 0; i < 64; i++)
            {
                if ((value & (ulong)(1 << i)) != 0)
                    return i + 1;
            }

            return 0;
        }
        #endregion

    }
}