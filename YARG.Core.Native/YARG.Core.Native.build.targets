<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    This target builds the YARG.Core.Native binary,
    and includes it in the build output of the consuming project.
  -->

  <Import Project="YARG.Core.Native.targets" />

  <ItemGroup>
    <CppFile Include="$(MSBuildThisFileDirectory)/**/*.h" />
    <CppFile Include="$(MSBuildThisFileDirectory)/**/*.c" />
    <CppFile Include="$(MSBuildThisFileDirectory)/**/*.hpp" />
    <CppFile Include="$(MSBuildThisFileDirectory)/**/*.cpp" />
  </ItemGroup>

  <!-- Don't hard-error on CMake cache not existing, just issue a warning
    Done to mitigate potential annoyance when someone just wants to check the C# side of things -->
  <Target Name="YARG_Core_Native_Warn" BeforeTargets="BeforeBuild" Condition="!Exists('$(CMakeCacheDirectory)')">
    <Warning Text="YARG.Core.Native CMake cache directory does not exist. Please configure CMake with the output directory set to 'build'. YARG.Core.Native build will be skipped." />
  </Target>

  <Target Name="YARG_Core_Native_Build" BeforeTargets="BeforeBuild" Condition="Exists('$(CMakeCacheDirectory)')"
        Inputs="@(CppFile)" Outputs="@(CMakeOutput)">
    <Error Condition="'$(CMakeConfiguration)' == ''"
        Text="Configuration '$(Configuration)' does not yet have a corresponding CMake configuration, add one to $(MSBuildThisFile)" />

    <!-- Unsure if Unity uses build/ for its own purposes, so warn against this -->
    <Warning Text="YARG.Core.Native Cmake cache directory is not recommended to be in the main YARG.Core repo, please configure it inside the YARG.Core submodule."
      Condition="'$(CMakeCacheDirectory_IsMain)' != ''"/>

    <Message Text="Building YARG.Core.Native:" />
    <Exec Command="cmake --build $(CMakeCacheDirectory) --target YARG.Core.Native --config $(CMakeConfiguration)" />
    <Copy SourceFiles="@(CMakeOutputFiles)" DestinationFolder="$(OutputPath)" />
  </Target>

</Project>